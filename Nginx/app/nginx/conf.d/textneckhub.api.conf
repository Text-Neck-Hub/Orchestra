# -------------------------------------------------------------------
# HTTP (80번 포트) -> HTTPS (443번 포트) 자동 리다이렉트 설정
# Certbot 인증을 위한 /.well-known/acme-challenge/ 경로는 여기서 처리
# -------------------------------------------------------------------
server {
    listen 80;
    server_name api.textneckhub.p-e.kr;

    # Certbot 인증을 위한 경로 (Let's Encrypt 챌린지 응답)
    location ~ /.well-known/acme-challenge/ {
        allow all;
        root /var/www/certbot; # Certbot 웹루트 경로 (컨테이너 내부 경로)
    }

    # 그 외 모든 HTTP 요청은 HTTPS로 리다이렉트
    location / {
        return 301 https://$host$request_uri;
    }
}

# -------------------------------------------------------------------
# HTTPS (443번 포트) 설정 - API Gateway 역할
# -------------------------------------------------------------------
server {
    listen 443 ssl;
    server_name api.textneckhub.p-e.kr;

    # ✨ 발급받은 인증서 파일 경로 지정 ✨
    ssl_certificate /etc/letsencrypt/live/api.textneckhub.p-e.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.textneckhub.p-e.kr/privkey.pem;

    # ✨ SSL 관련 추가 설정 (보안 강화를 위해 추천!) ✨
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 127.0.0.11 valid=30s; # Docker 내부 DNS resolver (필요 시)
    resolver_timeout 5s;

    # ✨ HSTS (HTTP Strict Transport Security) 설정 (보안 강화!) ✨
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

    # -------------------------------------------------------------------
    # 🚨🚨🚨 공통 정적 파일 및 미디어 파일 서빙 🚨🚨🚨
    # 모든 Django 서비스의 정적/미디어 파일은 여기에 통합되어 서빙됩니다.
    # -------------------------------------------------------------------
    location /static/ {
        alias /var/www/static/; # Nginx 컨테이너 내부의 정적 파일 공통 경로
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    location /media/ {
        alias /var/www/media/; # Nginx 컨테이너 내부의 미디어 파일 공통 경로
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # -------------------------------------------------------------------
    # 🚨🚨🚨 각 마이크로서비스의 API 엔드포인트 프록시 🚨🚨🚨
    # 클라이언트(프론트엔드)는 이 경로로 API 요청을 보냅니다.
    # 각 서비스의 urls.py는 이 접두사(/auth/, /board/ 등)를 제외한 경로로 시작해야 합니다.
    # -------------------------------------------------------------------

    # 인증 서비스 (Auth Service) API
    # 예시: api.textneckhub.p-e.kr/auth/v1/login -> auth_service:8000/v1/login
    location /auth/ {
        proxy_pass http://auth:8000/; # <-- 인증 서비스의 기본 URL로 프록시 (슬래시 중요!)
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 게시판 서비스 (Board Service) API
    # 예시: api.textneckhub.p-e.kr/board/v1/boards/free/posts -> board_service:8001/v1/boards/free/posts
    # location /board/ {
    #     proxy_pass http://board:8000/; # <-- 게시판 서비스의 기본 URL로 프록시
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }

    # 유저 서비스 (User Service) API (예시)
    # 예시: api.textneckhub.p-e.kr/user/v1/profiles -> user_service:8002/v1/profiles
    # location /user/ {
    #     proxy_pass http://user_service:8002/; # <-- 유저 서비스의 기본 URL로 프록시
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }

    # -------------------------------------------------------------------
    # 🚨🚨🚨 각 마이크로서비스의 어드민 페이지 프록시 🚨🚨🚨
    # 각 Django 서비스의 urls.py에 admin 경로가 정의되어 있어야 합니다.
    # (예: path('admin/', admin.site.urls) 또는 path('my-admin/', admin.site.urls))
    # -------------------------------------------------------------------

    # 인증 서비스 (Auth Service) Admin
    # 예시: api.textneckhub.p-e.kr/auth-admin/ -> auth_service:8000/admin/
    location /auth-admin/ {
        proxy_pass http://auth:8000/admin/; # <-- 인증 서비스의 admin 경로로 프록시
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 게시판 서비스 (Board Service) Admin
    # 예시: api.textneckhub.p-e.kr/board-admin/ -> board_service:8001/admin/
    # location /board-admin/ {
    #     proxy_pass http://board_service:8000/admin/; # <-- 게시판 서비스의 admin 경로로 프록시
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }

    # 유저 서비스 (User Service) Admin (예시)
    # 예시: api.textneckhub.p-e.kr/user-admin/ -> user_service:8002/admin/
    # location /user-admin/ {
    #     proxy_pass http://user_service:8002/admin/; # <-- 유저 서비스의 admin 경로로 프록시
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }

    # -------------------------------------------------------------------
    # 🚨🚨🚨 기본 Catch-all (모든 매칭되지 않는 요청) 🚨🚨🚨
    # 이 도메인이 API 전용이라면, 매칭되지 않는 요청은 404를 반환하거나
    # 기본 API 상태 페이지를 보여줄 수 있습니다.
    # -------------------------------------------------------------------
    location / {
        # API 전용 도메인에서 매칭되는 API 경로가 없다면 404 반환
        return 404; 
        # 또는 간단한 API 상태 메시지 반환
        # return 200 "API Gateway is running.";
    }
}
# server {
#     listen 80;
#     server_name api.textneckhub.p-e.kr; # www 없는 도메인도 추가!

#     # ✨ HTTP로 들어온 요청을 HTTPS로 자동으로 리다이렉트! ✨
#     return 301 https://$host$request_uri;

#     # Certbot 인증을 위한 경로 (이건 그대로 두거나 추가해줘)
#     location ~ /.well-known/acme-challenge/ {
#         allow all;
#         root /var/www/certbot; # Certbot 웹루트 경로 (컨테이너 내부 경로!)
#     }
# }

# # ✨ 443번 포트 (HTTPS) 설정 추가! ✨
# server {
#     listen 443 ssl; # 443번 포트로 HTTPS 요청을 받겠다!
#     server_name api.textneckhub.p-e.kr; # www 없는 도메인도 추가!

#     # ✨ 발급받은 인증서 파일 경로 지정! ✨
#     ssl_certificate /etc/letsencrypt/live/api.textneckhub.p-e.kr/fullchain.pem; # 전체 인증서 체인 파일
#     ssl_certificate_key /etc/letsencrypt/live/api.textneckhub.p-e.kr/privkey.pem; # 개인 키 파일

#     # ✨ SSL 관련 추가 설정 (보안 강화를 위해 추천!) ✨
#     ssl_protocols TLSv1.2 TLSv1.3; # 최신 TLS 버전 사용
#     ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"; # 안전한 암호화 방식만 사용
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     ssl_session_tickets off;
#     ssl_stapling on;
#     ssl_stapling_verify on;
#     resolver 127.0.0.11 valid=30s;
#     resolver_timeout 5s;

#     # ✨ HSTS (HTTP Strict Transport Security) 설정 (보안 강화!) ✨
#     add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

#     # ✨ 모든 요청을 백엔드(auth 서비스)로 프록시! ✨
#     location / {
#         # 🚨🚨🚨 이 부분에서 'root', 'index', 'try_files'를 제거했어! 🚨🚨🚨
#         # Nginx가 백엔드(auth:8000)로 모든 요청을 프록시할 경우,
#         # 여기서는 정적 파일 서빙 관련 지시어는 필요 없어!
#         # 백엔드 서비스(Django 등)가 정적 파일을 직접 서빙하거나,
#         # Nginx가 별도의 location 블록에서 정적 파일을 서빙해야 해.
#         proxy_pass http://auth:8000; # <-- auth 서비스로 요청을 넘겨줘!
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }

   
#     location /static/ {
#         alias /app/static/; # 컨테이너 내부의 정적 파일 경로 (volumes에 마운트되어 있어야 함)
#         expires 30d; # 캐싱 설정
#         add_header Cache-Control "public, no-transform";
#     }

    
#     location /media/ {
#         alias /app/media/; # 컨테이너 내부의 미디어 파일 경로 (volumes에 마운트되어 있어야 함)
#         expires 30d; # 캐싱 설정
#         add_header Cache-Control "public, no-transform";
#     }

#     # 다른 location 블록들 (예: /api 경로는 백엔드로 넘기기 등)
#     # location /api/ {
#     #     proxy_pass http://[API 서버 주소]:[API 서버 포트];
#     #     # ... 다른 프록시 설정들 ...
#     # }
# }

# /etc/nginx/nginx.conf 또는 /etc/nginx/conf.d/api-gateway.conf 파일에 작성
# /etc/nginx/nginx.conf (http 블록 내부) 또는 /etc/nginx/conf.d/api-gateway.conf

# http {
#     # ===========================================================================
#     # ✨ Nginx 기본 설정 (일반적으로 nginx.conf에 이미 존재) ✨
#     # ===========================================================================
#     include /etc/nginx/mime.types;
#     default_type application/octet-stream;

#     # 로그 형식 설정
#     log_format main '$remote_addr - $remote_user [$time_local] "$request" '
#                     '$status $body_bytes_sent "$http_referer" '
#                     '"$http_user_agent" "$http_x_forwarded_for" '
#                     '$request_time $upstream_response_time $pipe';

#     access_log /var/log/nginx/access.log main;
#     error_log /var/log/nginx/error.log warn;

#     sendfile on;
#     tcp_nopush on;
#     tcp_nodelay on;
#     keepalive_timeout 65;
#     types_hash_max_size 2048;

#     # 클라이언트가 보낼 수 있는 최대 요청 본문 크기
#     client_max_body_size 100M;

#     # ===========================================================================
#     # ✨ Upstream 정의: 내부 마이크로서비스들의 주소를 여기에 명시! ✨
#     # Docker 환경에서는 서비스 이름이 DNS처럼 동작합니다.
#     # ===========================================================================

#     # 1. 인증 서비스 (Auth Service)
#     upstream auth_service {
#         server auth:8000; # 예: Docker Compose 서비스 이름 (auth)과 포트 (8000)
#     }

#     # 2. 게시판 서비스 (Board Service) - 예시
#     upstream board_service {
#         server board:8001; # 예: Docker Compose 서비스 이름 (board)과 포트 (8001)
#     }

#     # 3. 기타 다른 서비스들도 여기에 추가...
#     # upstream another_service {
#     #     server another:8002;
#     # }

#     # ===========================================================================
#     # ✨ Server 블록 1: HTTP (80번 포트) 요청 처리 및 HTTPS 리다이렉트 ✨
#     # ===========================================================================
#     server {
#         listen 80; # HTTP 요청을 받음
#         server_name api.textneckhub.p-e.kr; # API 도메인

#         # 모든 HTTP 요청을 HTTPS로 강제 리다이렉트
#         location / {
#             return 301 https://$host$request_uri;
#         }

#         # Certbot 인증을 위한 경로 (Let's Encrypt를 사용한다면 필수)
#         location ~ /.well-known/acme-challenge/ {
#             allow all;
#             root /var/www/certbot; # Certbot 웹루트 경로 (컨테이너 내부 경로)
#         }
#     }

#     # ===========================================================================
#     # ✨ Server 블록 2: HTTPS (443번 포트) 요청 처리 - API Gateway의 핵심 ✨
#     # ===========================================================================
#     server {
#         listen 443 ssl http2; # 443번 포트로 HTTPS 요청을 받음
#         server_name api.textneckhub.p-e.kr; # API 도메인

#         # ✨ SSL 인증서 파일 경로 지정 ✨
#         ssl_certificate /etc/letsencrypt/live/api.textneckhub.p-e.kr/fullchain.pem; # 전체 인증서 체인 파일
#         ssl_certificate_key /etc/letsencrypt/live/api.textneckhub.p-e.kr/privkey.pem; # 개인 키 파일

#         # ✨ SSL/TLS 보안 강화 설정 ✨
#         ssl_protocols TLSv1.2 TLSv1.3; # 최신 TLS 버전 사용
#         ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"; # 안전한 암호화 방식만 사용
#         ssl_prefer_server_ciphers off;
#         ssl_session_cache shared:SSL:10m;
#         ssl_session_timeout 10m;
#         ssl_session_tickets off; # 세션 티켓 비활성화 (보안 강화)
#         ssl_stapling on; # OCSP 스테이플링 활성화 (성능 및 보안)
#         ssl_stapling_verify on; # OCSP 스테이플링 검증
#         resolver 127.0.0.11 valid=30s; # Docker 내부 DNS (컨테이너 간 통신 시 중요)
#         resolver_timeout 5s;

#         # ✨ HSTS (HTTP Strict Transport Security) 설정 (보안 강화) ✨
#         add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

#         # ===========================================================================
#         # ✨ 1. 인증 서브 요청 (auth_request 모듈 사용) ✨
#         # 이 location은 외부에서 직접 접근할 수 없고, auth_request 지시어에 의해서만 호출됩니다.
#         # ===========================================================================
#         location @auth {
#             internal; # 외부 접근 금지
#             # 인증 서비스의 토큰 검증 엔드포인트. 실제 토큰 검증 로직을 수행해야 합니다.
#             proxy_pass http://auth_service/v2/auth/verify-token/; 
#             proxy_pass_request_body off; # 인증 서비스로 요청 본문은 보내지 않음 (GET 요청처럼)
#             proxy_set_header Content-Length ""; # Content-Length 헤더 초기화

#             # 원본 요청의 Authorization 헤더를 인증 서비스로 전달
#             proxy_set_header Authorization $http_authorization;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header Host $host;

#             # 인증 서비스에서 검증 후 반환하는 사용자 정보 헤더를 Nginx 변수에 저장
#             # (인증 서비스가 검증 성공 시 X-User-ID, X-User-Roles 등의 헤더를 응답에 포함해야 함)
#             auth_request_set $user_id $upstream_http_x_user_id;
#             auth_request_set $user_roles $upstream_http_x_user_roles;
#             auth_request_set $user_email $upstream_http_x_user_email; # 추가 정보 예시
#         }

#         # ===========================================================================
#         # ✨ 2. 특정 API 경로 예외 처리 (인증 검증을 우회) ✨
#         # 토큰 발행, 갱신 등 아직 토큰이 없거나 검증이 불필요한 엔드포인트는
#         # auth_request를 거치지 않도록 이 블록들이 일반 /v2/ 블록보다 먼저 와야 합니다.
#         # ===========================================================================

#         # 소셜 로그인 콜백 (액세스 토큰 발행) 엔드포인트
#         location /v2/auth/access-token/ {
#             proxy_pass http://auth_service/v2/auth/access-token/;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#             # 여기서는 auth_request를 호출하지 않습니다.
#         }

#         # 리프레시 토큰 갱신 엔드포인트 (simple_jwt의 token/refresh)
#         location /v2/auth/token/refresh/ {
#             proxy_pass http://auth_service/v2/auth/token/refresh/;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#             # 여기도 auth_request를 호출하지 않습니다.
#         }

#         # 리프레시 토큰 무효화 엔드포인트 (로그아웃)
#         # 이 엔드포인트는 백엔드에서 인증이 필요할 수 있지만, Nginx에서는 토큰 발행/갱신과 함께 예외 처리합니다.
#         location /v2/auth/refresh-token/revoke/ {
#             proxy_pass http://auth_service/v2/auth/refresh-token/revoke/;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#             # 여기도 auth_request를 호출하지 않습니다.
#         }

#         # ===========================================================================
#         # ✨ 3. API Gateway 라우팅 및 인증/인가 처리 (일반적인 API 요청) ✨
#         # 위에 정의된 예외 엔드포인트를 제외한 모든 /v2/ 요청에 적용됩니다.
#         # ===========================================================================
#         location /v2/ {
#             auth_request @auth; # 여기에서만 인증 검증을 수행!

#             # 인증 서비스에서 받은 사용자 정보를 실제 백엔드 서비스로 전달
#             proxy_set_header X-User-ID $user_id;
#             proxy_set_header X-User-Roles $user_roles;
#             proxy_set_header X-User-Email $user_email;

#             # 원본 클라이언트 정보 전달 (최종 서비스에 전달)
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header Host $host;
#             proxy_set_header X-Forwarded-Proto $scheme;

#             # 경로에 따라 적절한 Upstream 서비스로 요청 전달 (라우팅)
#             # /v2/auth/ 로 시작하는 요청은 auth_service로
#             rewrite ^/v2/auth/(.*)$ /$1 break;
#             proxy_pass http://auth_service;

#             # /v2/board/ 로 시작하는 요청은 board_service로
#             rewrite ^/v2/board/(.*)$ /$1 break;
#             proxy_pass http://board_service;

#             # ... 다른 API 경로들도 여기에 추가 ...
#             # rewrite ^/v2/another/(.*)$ /$1 break;
#             # proxy_pass http://another_service;

#             # 매칭되는 규칙이 없으면 404 반환
#             return 404;
#         }

#         # ===========================================================================
#         # ✨ 4. Django 정적/미디어 파일 서빙 (선택 사항) ✨
#         # 이 Nginx가 직접 서빙하는 경우에만 필요합니다.
#         # 보통은 프론트엔드 Nginx가 정적 파일을 처리하거나, CDN을 사용합니다.
#         # ===========================================================================
#         location /static/ {
#             alias /app/static/; # 컨테이너 내부의 정적 파일 경로 (volumes에 마운트되어 있어야 함)
#             expires 30d; # 캐싱 설정
#             add_header Cache-Control "public, no-transform";
#         }

#         location /media/ {
#             alias /app/media/; # 컨테이너 내부의 미디어 파일 경로 (volumes에 마운트되어 있어야 함)
#             expires 30d; # 캐싱 설정
#             add_header Cache-Control "public, no-transform";
#         }

#         # ===========================================================================
#         # ✨ 5. CORS (Cross-Origin Resource Sharing) 설정 ✨
#         # 프론트엔드와 백엔드 도메인이 다를 경우 필수입니다.
#         # ===========================================================================
#         # OPTIONS 요청 처리 (Preflight Request)
#         location ~ ^/v2/(.*)$ { # /v2/ 경로에 대한 CORS 설정
#             if ($request_method = 'OPTIONS') {
#                 # 네 프론트엔드 도메인을 정확히 입력해주세요.
#                 add_header 'Access-Control-Allow-Origin' 'https://www.textneckhub.p-e.kr';
#                 add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT, PATCH';
#                 add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-CSRFToken';
#                 add_header 'Access-Control-Allow-Credentials' 'true'; # withCredentials 사용 시 필수
#                 add_header 'Access-Control-Max-Age' 1728000; # Preflight 캐싱 시간 (20일)
#                 add_header 'Content-Type' 'text/plain; charset=utf-8';
#                 add_header 'Content-Length' 0;
#                 return 204;
#             }

#             # 실제 요청에 대한 CORS 헤더
#             # 네 프론트엔드 도메인을 정확히 입력해주세요.
#             add_header 'Access-Control-Allow-Origin' 'https://www.textneckhub.p-e.kr';
#             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT, PATCH';
#             add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-CSRFToken';
#             add_header 'Access-Control-Allow-Credentials' 'true'; # withCredentials 사용 시 필수
#             add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
#             # proxy_pass는 위 location /v2/ 에 이미 설정되어 있으므로 여기서는 제거
#         }
#     }
# }