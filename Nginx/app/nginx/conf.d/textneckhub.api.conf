
server {
    listen 80;
    server_name api.textneckhub.o-r.kr textneckhub.o-r.kr; # www 없는 도메인도 추가!

    # ✨ HTTP로 들어온 요청을 HTTPS로 자동으로 리다이렉트! ✨
    return 301 https://$host$request_uri;

    # Certbot 인증을 위한 경로 (이건 그대로 두거나 추가해줘)
    location ~ /.well-known/acme-challenge/ {
        allow all;
        root /var/www/certbot; # Certbot 웹루트 경로 (컨테이너 내부 경로!)
    }
}

# ✨ 443번 포트 (HTTPS) 설정 추가! ✨
server {
    listen 443 ssl; # 443번 포트로 HTTPS 요청을 받겠다!
    server_name api.textneckhub.o-r.kr textneckhub.o-r.kr; # www 없는 도메인도 추가!

    # ✨ 발급받은 인증서 파일 경로 지정! ✨
    ssl_certificate /etc/letsencrypt/live/api.textneckhub.o-r.kr/fullchain.pem; # 전체 인증서 체인 파일
    ssl_certificate_key /etc/letsencrypt/live/api.textneckhub.o-r.kr/privkey.pem; # 개인 키 파일

    # ✨ SSL 관련 추가 설정 (보안 강화를 위해 추천!) ✨
    ssl_protocols TLSv1.2 TLSv1.3; # 최신 TLS 버전 사용
    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"; # 안전한 암호화 방식만 사용
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 127.0.0.11 valid=30s;
    resolver_timeout 5s;

    # ✨ HSTS (HTTP Strict Transport Security) 설정 (보안 강화!) ✨
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

    # ✨ 모든 요청을 백엔드(auth 서비스)로 프록시! ✨
    location / {
        # 🚨🚨🚨 이 부분에서 'root', 'index', 'try_files'를 제거했어! 🚨🚨🚨
        # Nginx가 백엔드(auth:8000)로 모든 요청을 프록시할 경우,
        # 여기서는 정적 파일 서빙 관련 지시어는 필요 없어!
        # 백엔드 서비스(Django 등)가 정적 파일을 직접 서빙하거나,
        # Nginx가 별도의 location 블록에서 정적 파일을 서빙해야 해.
        proxy_pass http://auth:8000; # <-- auth 서비스로 요청을 넘겨줘!
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

   
    location /static/ {
        alias /app/static/; # 컨테이너 내부의 정적 파일 경로 (volumes에 마운트되어 있어야 함)
        expires 30d; # 캐싱 설정
        add_header Cache-Control "public, no-transform";
    }

    
    location /media/ {
        alias /app/media/; # 컨테이너 내부의 미디어 파일 경로 (volumes에 마운트되어 있어야 함)
        expires 30d; # 캐싱 설정
        add_header Cache-Control "public, no-transform";
    }

    # 다른 location 블록들 (예: /api 경로는 백엔드로 넘기기 등)
    # location /api/ {
    #     proxy_pass http://[API 서버 주소]:[API 서버 포트];
    #     # ... 다른 프록시 설정들 ...
    # }
}

# server {
#     listen 80;
#     server_name api.textneckhub.p-e.kr textneckhub.p-e.kr; # www 없는 도메인도 추가!

#     # ✨ HTTP로 들어온 요청을 HTTPS로 자동으로 리다이렉트! ✨
#     return 301 https://$host$request_uri;

#     # Certbot 인증을 위한 경로 (이건 그대로 두거나 추가해줘)
#     location ~ /.well-known/acme-challenge/ {
#         allow all;
#         root /var/www/certbot; # Certbot 웹루트 경로 (컨테이너 내부 경로!)
#     }
# }

# # ✨ 443번 포트 (HTTPS) 설정 추가! ✨
# server {
#     listen 443 ssl; # 443번 포트로 HTTPS 요청을 받겠다!
#     server_name api.textneckhub.p-e.kr textneckhub.p-e.kr; # www 없는 도메인도 추가!

#     # ✨ 발급받은 인증서 파일 경로 지정! ✨
#     ssl_certificate /etc/letsencrypt/live/api.textneckhub.p-e.kr/fullchain.pem; # 전체 인증서 체인 파일
#     ssl_certificate_key /etc/letsencrypt/live/api.textneckhub.p-e.kr/privkey.pem; # 개인 키 파일

#     # ✨ SSL 관련 추가 설정 (보안 강화를 위해 추천!) ✨
#     ssl_protocols TLSv1.2 TLSv1.3; # 최신 TLS 버전 사용
#     ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"; # 안전한 암호화 방식만 사용
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     ssl_session_tickets off;
#     ssl_stapling on;
#     ssl_stapling_verify on;
#     resolver 127.0.0.11 valid=30s;
#     resolver_timeout 5s;

#     # ✨ HSTS (HTTP Strict Transport Security) 설정 (보안 강화!) ✨
#     add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

#     # ✨ 모든 요청을 백엔드(auth 서비스)로 프록시! ✨
#     location / {
#         # 🚨🚨🚨 이 부분에서 'root', 'index', 'try_files'를 제거했어! 🚨🚨🚨
#         # Nginx가 백엔드(auth:8000)로 모든 요청을 프록시할 경우,
#         # 여기서는 정적 파일 서빙 관련 지시어는 필요 없어!
#         # 백엔드 서비스(Django 등)가 정적 파일을 직접 서빙하거나,
#         # Nginx가 별도의 location 블록에서 정적 파일을 서빙해야 해.
#         proxy_pass http://auth:8000; # <-- auth 서비스로 요청을 넘겨줘!
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }

   
#     location /static/ {
#         alias /app/static/; # 컨테이너 내부의 정적 파일 경로 (volumes에 마운트되어 있어야 함)
#         expires 30d; # 캐싱 설정
#         add_header Cache-Control "public, no-transform";
#     }

    
#     location /media/ {
#         alias /app/media/; # 컨테이너 내부의 미디어 파일 경로 (volumes에 마운트되어 있어야 함)
#         expires 30d; # 캐싱 설정
#         add_header Cache-Control "public, no-transform";
#     }

#     # 다른 location 블록들 (예: /api 경로는 백엔드로 넘기기 등)
#     # location /api/ {
#     #     proxy_pass http://[API 서버 주소]:[API 서버 포트];
#     #     # ... 다른 프록시 설정들 ...
#     # }
# }
