version: '3.8'

services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Nginx/app/certbot-www:/var/www/certbot:z
      - ./Nginx/app/certbot-etc:/etc/letsencrypt:z
      - ./Nginx/app/nginx/nginx.conf:/etc/nginx/nginx.conf:z
      - ./Nginx/app/nginx/conf.d/:/etc/nginx/conf.d/:z
      - ./Frontend/app/dist:/usr/share/nginx/html:ro
      - auth_static_data:/var/www/static/auth/:ro  
      - auth_media_data:/var/www/media/auth/:ro    
      - board_static_data:/var/www/static/board/:ro 
      - board_media_data:/var/www/media/board/:ro 
    restart: always
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    depends_on: 
      - auth
      - board

  alter:
    image: textneckhub-alter:v1.0.0
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8000
      - DATABASE_URL=${ALTER_DATABASE_URL}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      
  auth:
    build:
      context: ./Auth
      dockerfile: Dockerfile.prod
    image: textneckhub-auth:v1.0.0
    depends_on:
      - postgres-auth
      - redis
     
    environment:
      - DATABASE_URL=${AUTH_DATABASE_URL}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_ACCESS_TOKEN_LIFETIME_MINUTES=${JWT_ACCESS_TOKEN_LIFETIME_MINUTES}
      - JWT_REFRESH_TOKEN_LIFETIME_DAYS=${JWT_REFRESH_TOKEN_LIFETIME_DAYS}
      - JWT_ROTATE_REFRESH_TOKENS=${JWT_ROTATE_REFRESH_TOKENS}
      - JWT_BLACKLIST_AFTER_ROTATION=${JWT_BLACKLIST_AFTER_ROTATION}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_USER_ID_CLAIM=${JWT_USER_ID_CLAIM}
      - JWT_JTI_CLAIM=${JWT_JTI_CLAIM}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_SLIDING_TOKEN_LIFETIME_MINUTES=${JWT_SLIDING_TOKEN_LIFETIME_MINUTES}
      - JWT_SLIDING_TOKEN_REFRESH_LIFETIME_DAYS=${JWT_SLIDING_TOKEN_REFRESH_LIFETIME_DAYS}
      - REDIS_HOST=${REDIS_HOST}
    volumes:
      - ./Auth/app:/app 
      - auth_static_data:/data/static/:rw
      - auth_media_data:/data/media/:rw
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure


  board:
    build:
      context: ./Board
      dockerfile: Dockerfile.prod
    image: textneckhub-board:v1.0.0
    depends_on:
      - postgres-board
      - redis
      
    environment:
      - DATABASE_URL=${BOARD_DATABASE_URL}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SECRET_KEY=${SECRET_KEY} 
      - JWT_ACCESS_TOKEN_LIFETIME_MINUTES=${JWT_ACCESS_TOKEN_LIFETIME_MINUTES}
      - JWT_REFRESH_TOKEN_LIFETIME_DAYS=${JWT_REFRESH_TOKEN_LIFETIME_DAYS}
      - JWT_ROTATE_REFRESH_TOKENS=${JWT_ROTATE_REFRESH_TOKENS}
      - JWT_BLACKLIST_AFTER_ROTATION=${JWT_BLACKLIST_AFTER_ROTATION}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_USER_ID_CLAIM=${JWT_USER_ID_CLAIM}
      - JWT_JTI_CLAIM=${JWT_JTI_CLAIM}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_SLIDING_TOKEN_LIFETIME_MINUTES=${JWT_SLIDING_TOKEN_LIFETIME_MINUTES}
      - JWT_SLIDING_TOKEN_REFRESH_LIFETIME_DAYS=${JWT_SLIDING_TOKEN_REFRESH_LIFETIME_DAYS}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - REDIS_HOST=${REDIS_HOST}
    volumes:
      - ./Board/app:/app 
      - board_static_data:/data/static/:rw 
      - board_media_data:/data/media/:rw
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
  core:
    build:
      context: ./Core
      dockerfile: Dockerfile.prod
    image: textneckhub-core:v1.0.0
    depends_on:
      - mongodb-core
      - redis
    environment:
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SECRET_KEY=${SECRET_KEY} 
      - JWT_ACCESS_TOKEN_LIFETIME_MINUTES=${JWT_ACCESS_TOKEN_LIFETIME_MINUTES}
      - JWT_REFRESH_TOKEN_LIFETIME_DAYS=${JWT_REFRESH_TOKEN_LIFETIME_DAYS}
      - JWT_ROTATE_REFRESH_TOKENS=${JWT_ROTATE_REFRESH_TOKENS}
      - JWT_BLACKLIST_AFTER_ROTATION=${JWT_BLACKLIST_AFTER_ROTATION}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_USER_ID_CLAIM=${JWT_USER_ID_CLAIM}
      - JWT_JTI_CLAIM=${JWT_JTI_CLAIM}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_SLIDING_TOKEN_LIFETIME_MINUTES=${JWT_SLIDING_TOKEN_LIFETIME_MINUTES}
      - JWT_SLIDING_TOKEN_REFRESH_LIFETIME_DAYS=${JWT_SLIDING_TOKEN_REFRESH_LIFETIME_DAYS}
      - DATABASE_URL=${CORE_DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST}
      - ENV=production
    volumes:
      - ./Core/app:/app 
    deploy: 
      replicas: 1 
      restart_policy:
        condition: on-failure

  postgres-auth:
    image: postgres:15
    environment:
      - POSTGRES_USER=${AUTH_DB_USER}
      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD}
      - POSTGRES_DB=${AUTH_DB_NAME}
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
      - ./Database/auth-init-db:/docker-entrypoint-initdb.d
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure


  postgres-board:
    image: postgres:15
    environment:
      - SECRET_KEY=${SECRET_KEY} 
      - POSTGRES_USER=${BOARD_DB_USER}
      - POSTGRES_PASSWORD=${BOARD_DB_PASSWORD}
      - POSTGRES_DB=${BOARD_DB_NAME}
    volumes:
      - postgres_board_data:/var/lib/postgresql/data
      - ./Database/board-init-db:/docker-entrypoint-initdb.d
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  
  mongodb-core:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${CORE_DB_USER} 
      MONGO_INITDB_ROOT_PASSWORD: ${CORE_DB_PASSWORD} 
    volumes:
      - mongodb_core_data:/data/db 
      
    deploy: 
      replicas: 1 
      restart_policy:
        condition: on-failure

  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./Monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - core
      - mongodb-exporter
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  mongodb-exporter:
    image: bitnami/mongodb-exporter:latest
    environment:
      - MONGODB_URI=mongodb://${CORE_DB_USER}:${CORE_DB_PASSWORD}@mongodb-core:27017/
    ports:
      - "9216:9216"
    depends_on:
      - mongodb-core
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  kafka:
    image: bitnami/kafka:3.7
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9094:9094"   
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      - core
      - board
      - auth
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

        

volumes:
  kafka_data:
  grafana_data:
  postgres_auth_data:
  postgres_board_data:
  mongodb_core_data:
  redis_data:
  auth_static_data:   
  auth_media_data:    
  board_static_data:  
  board_media_data:   
 